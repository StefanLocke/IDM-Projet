/**
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl.tests;

import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.xtext.example.mydsl.idmdsl.Programme;

@ExtendWith(InjectionExtension.class)
@InjectWith(MyDslInjectorProvider.class)
@SuppressWarnings("all")
public class MyDslParsingTest {
  @Inject
  private ParseHelper<Programme> parseHelper;
  
  @Test
  public void loadModel() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Load(\"example.csv\") {\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("InsertCol(0, \"0\");");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("InsertCol(1, \"1\");");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("InsertCol(2, \"2\");");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("InsertCol(3, \"3\");");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("InsertCol(4, \"4\");");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("InsertCol(5,\"FACTORIEL\");");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Modify(0,0,2);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Modify(0,0,3);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Modify(0,0,4);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Modify(0,0,5);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Modify(0,0,Lineprod(0));");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Programme result = this.parseHelper.parse(_builder);
      final PythonCompiler compiler = new PythonCompiler(result);
      InputOutput.<String>print(compiler.doCompile());
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
