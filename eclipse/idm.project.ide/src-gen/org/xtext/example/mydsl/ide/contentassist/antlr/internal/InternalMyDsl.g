/*
 * generated by Xtext 2.25.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}
@parser::members {
	private MyDslGrammarAccess grammarAccess;

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleProgramme
entryRuleProgramme
:
{ before(grammarAccess.getProgrammeRule()); }
	 ruleProgramme
{ after(grammarAccess.getProgrammeRule()); } 
	 EOF 
;

// Rule Programme
ruleProgramme 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProgrammeAccess().getLoadscopesAssignment()); }
		(rule__Programme__LoadscopesAssignment)*
		{ after(grammarAccess.getProgrammeAccess().getLoadscopesAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLoadscope
entryRuleLoadscope
:
{ before(grammarAccess.getLoadscopeRule()); }
	 ruleLoadscope
{ after(grammarAccess.getLoadscopeRule()); } 
	 EOF 
;

// Rule Loadscope
ruleLoadscope 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLoadscopeAccess().getAlternatives()); }
		(rule__Loadscope__Alternatives)
		{ after(grammarAccess.getLoadscopeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLoad
entryRuleLoad
:
{ before(grammarAccess.getLoadRule()); }
	 ruleLoad
{ after(grammarAccess.getLoadRule()); } 
	 EOF 
;

// Rule Load
ruleLoad 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLoadAccess().getGroup()); }
		(rule__Load__Group__0)
		{ after(grammarAccess.getLoadAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCreate
entryRuleCreate
:
{ before(grammarAccess.getCreateRule()); }
	 ruleCreate
{ after(grammarAccess.getCreateRule()); } 
	 EOF 
;

// Rule Create
ruleCreate 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCreateAccess().getGroup()); }
		(rule__Create__Group__0)
		{ after(grammarAccess.getCreateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInstruction
entryRuleInstruction
:
{ before(grammarAccess.getInstructionRule()); }
	 ruleInstruction
{ after(grammarAccess.getInstructionRule()); } 
	 EOF 
;

// Rule Instruction
ruleInstruction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInstructionAccess().getGroup()); }
		(rule__Instruction__Group__0)
		{ after(grammarAccess.getInstructionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInsertCol
entryRuleInsertCol
:
{ before(grammarAccess.getInsertColRule()); }
	 ruleInsertCol
{ after(grammarAccess.getInsertColRule()); } 
	 EOF 
;

// Rule InsertCol
ruleInsertCol 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInsertColAccess().getGroup()); }
		(rule__InsertCol__Group__0)
		{ after(grammarAccess.getInsertColAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRemoveCol
entryRuleRemoveCol
:
{ before(grammarAccess.getRemoveColRule()); }
	 ruleRemoveCol
{ after(grammarAccess.getRemoveColRule()); } 
	 EOF 
;

// Rule RemoveCol
ruleRemoveCol 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRemoveColAccess().getAlternatives()); }
		(rule__RemoveCol__Alternatives)
		{ after(grammarAccess.getRemoveColAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInsertLine
entryRuleInsertLine
:
{ before(grammarAccess.getInsertLineRule()); }
	 ruleInsertLine
{ after(grammarAccess.getInsertLineRule()); } 
	 EOF 
;

// Rule InsertLine
ruleInsertLine 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInsertLineAccess().getGroup()); }
		(rule__InsertLine__Group__0)
		{ after(grammarAccess.getInsertLineAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRemoveLine
entryRuleRemoveLine
:
{ before(grammarAccess.getRemoveLineRule()); }
	 ruleRemoveLine
{ after(grammarAccess.getRemoveLineRule()); } 
	 EOF 
;

// Rule RemoveLine
ruleRemoveLine 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRemoveLineAccess().getGroup()); }
		(rule__RemoveLine__Group__0)
		{ after(grammarAccess.getRemoveLineAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInsert
entryRuleInsert
:
{ before(grammarAccess.getInsertRule()); }
	 ruleInsert
{ after(grammarAccess.getInsertRule()); } 
	 EOF 
;

// Rule Insert
ruleInsert 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInsertAccess().getGroup()); }
		(rule__Insert__Group__0)
		{ after(grammarAccess.getInsertAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrint
entryRulePrint
:
{ before(grammarAccess.getPrintRule()); }
	 rulePrint
{ after(grammarAccess.getPrintRule()); } 
	 EOF 
;

// Rule Print
rulePrint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrintAccess().getGroup()); }
		(rule__Print__Group__0)
		{ after(grammarAccess.getPrintAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExportCSV
entryRuleExportCSV
:
{ before(grammarAccess.getExportCSVRule()); }
	 ruleExportCSV
{ after(grammarAccess.getExportCSVRule()); } 
	 EOF 
;

// Rule ExportCSV
ruleExportCSV 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExportCSVAccess().getGroup()); }
		(rule__ExportCSV__Group__0)
		{ after(grammarAccess.getExportCSVAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExportJSON
entryRuleExportJSON
:
{ before(grammarAccess.getExportJSONRule()); }
	 ruleExportJSON
{ after(grammarAccess.getExportJSONRule()); } 
	 EOF 
;

// Rule ExportJSON
ruleExportJSON 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExportJSONAccess().getGroup()); }
		(rule__ExportJSON__Group__0)
		{ after(grammarAccess.getExportJSONAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
		(rule__Expression__Alternatives)
		{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression
:
{ before(grammarAccess.getPrimaryExpressionRule()); }
	 rulePrimaryExpression
{ after(grammarAccess.getPrimaryExpressionRule()); } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
		(rule__PrimaryExpression__Alternatives)
		{ after(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSelectcell
entryRuleSelectcell
:
{ before(grammarAccess.getSelectcellRule()); }
	 ruleSelectcell
{ after(grammarAccess.getSelectcellRule()); } 
	 EOF 
;

// Rule Selectcell
ruleSelectcell 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSelectcellAccess().getGroup()); }
		(rule__Selectcell__Group__0)
		{ after(grammarAccess.getSelectcellAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLinesum
entryRuleLinesum
:
{ before(grammarAccess.getLinesumRule()); }
	 ruleLinesum
{ after(grammarAccess.getLinesumRule()); } 
	 EOF 
;

// Rule Linesum
ruleLinesum 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLinesumAccess().getGroup()); }
		(rule__Linesum__Group__0)
		{ after(grammarAccess.getLinesumAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleColsum
entryRuleColsum
:
{ before(grammarAccess.getColsumRule()); }
	 ruleColsum
{ after(grammarAccess.getColsumRule()); } 
	 EOF 
;

// Rule Colsum
ruleColsum 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getColsumAccess().getAlternatives()); }
		(rule__Colsum__Alternatives)
		{ after(grammarAccess.getColsumAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLineprod
entryRuleLineprod
:
{ before(grammarAccess.getLineprodRule()); }
	 ruleLineprod
{ after(grammarAccess.getLineprodRule()); } 
	 EOF 
;

// Rule Lineprod
ruleLineprod 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLineprodAccess().getGroup()); }
		(rule__Lineprod__Group__0)
		{ after(grammarAccess.getLineprodAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleColprod
entryRuleColprod
:
{ before(grammarAccess.getColprodRule()); }
	 ruleColprod
{ after(grammarAccess.getColprodRule()); } 
	 EOF 
;

// Rule Colprod
ruleColprod 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getColprodAccess().getAlternatives()); }
		(rule__Colprod__Alternatives)
		{ after(grammarAccess.getColprodAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBinexpr
entryRuleBinexpr
:
{ before(grammarAccess.getBinexprRule()); }
	 ruleBinexpr
{ after(grammarAccess.getBinexprRule()); } 
	 EOF 
;

// Rule Binexpr
ruleBinexpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBinexprAccess().getGroup()); }
		(rule__Binexpr__Group__0)
		{ after(grammarAccess.getBinexprAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOp
entryRuleOp
:
{ before(grammarAccess.getOpRule()); }
	 ruleOp
{ after(grammarAccess.getOpRule()); } 
	 EOF 
;

// Rule Op
ruleOp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOpAccess().getAlternatives()); }
		(rule__Op__Alternatives)
		{ after(grammarAccess.getOpAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNoneValue
entryRuleNoneValue
:
{ before(grammarAccess.getNoneValueRule()); }
	 ruleNoneValue
{ after(grammarAccess.getNoneValueRule()); } 
	 EOF 
;

// Rule NoneValue
ruleNoneValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNoneValueAccess().getValueAssignment()); }
		(rule__NoneValue__ValueAssignment)
		{ after(grammarAccess.getNoneValueAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntValue
entryRuleIntValue
:
{ before(grammarAccess.getIntValueRule()); }
	 ruleIntValue
{ after(grammarAccess.getIntValueRule()); } 
	 EOF 
;

// Rule IntValue
ruleIntValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntValueAccess().getValueAssignment()); }
		(rule__IntValue__ValueAssignment)
		{ after(grammarAccess.getIntValueAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringValue
entryRuleStringValue
:
{ before(grammarAccess.getStringValueRule()); }
	 ruleStringValue
{ after(grammarAccess.getStringValueRule()); } 
	 EOF 
;

// Rule StringValue
ruleStringValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringValueAccess().getValueAssignment()); }
		(rule__StringValue__ValueAssignment)
		{ after(grammarAccess.getStringValueAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loadscope__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLoadscopeAccess().getLoadParserRuleCall_0()); }
		ruleLoad
		{ after(grammarAccess.getLoadscopeAccess().getLoadParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getLoadscopeAccess().getCreateParserRuleCall_1()); }
		ruleCreate
		{ after(grammarAccess.getLoadscopeAccess().getCreateParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInstructionAccess().getInsertLineParserRuleCall_0_0()); }
		ruleInsertLine
		{ after(grammarAccess.getInstructionAccess().getInsertLineParserRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getRemoveLineParserRuleCall_0_1()); }
		ruleRemoveLine
		{ after(grammarAccess.getInstructionAccess().getRemoveLineParserRuleCall_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getInsertColParserRuleCall_0_2()); }
		ruleInsertCol
		{ after(grammarAccess.getInstructionAccess().getInsertColParserRuleCall_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getRemoveColParserRuleCall_0_3()); }
		ruleRemoveCol
		{ after(grammarAccess.getInstructionAccess().getRemoveColParserRuleCall_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getInsertParserRuleCall_0_4()); }
		ruleInsert
		{ after(grammarAccess.getInstructionAccess().getInsertParserRuleCall_0_4()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getExportJSONParserRuleCall_0_5()); }
		ruleExportJSON
		{ after(grammarAccess.getInstructionAccess().getExportJSONParserRuleCall_0_5()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getExportCSVParserRuleCall_0_6()); }
		ruleExportCSV
		{ after(grammarAccess.getInstructionAccess().getExportCSVParserRuleCall_0_6()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getPrintParserRuleCall_0_7()); }
		rulePrint
		{ after(grammarAccess.getInstructionAccess().getPrintParserRuleCall_0_7()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RemoveCol__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRemoveColAccess().getGroup_0()); }
		(rule__RemoveCol__Group_0__0)
		{ after(grammarAccess.getRemoveColAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getRemoveColAccess().getGroup_1()); }
		(rule__RemoveCol__Group_1__0)
		{ after(grammarAccess.getRemoveColAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__ValueAlternatives_5_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInsertAccess().getValueExpressionParserRuleCall_5_0_0()); }
		ruleExpression
		{ after(grammarAccess.getInsertAccess().getValueExpressionParserRuleCall_5_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getInsertAccess().getValueStringValueParserRuleCall_5_0_1()); }
		ruleStringValue
		{ after(grammarAccess.getInsertAccess().getValueStringValueParserRuleCall_5_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__ValueAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrintAccess().getValueExpressionParserRuleCall_1_0_0()); }
		ruleExpression
		{ after(grammarAccess.getPrintAccess().getValueExpressionParserRuleCall_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrintAccess().getValueStringValueParserRuleCall_1_0_1()); }
		ruleStringValue
		{ after(grammarAccess.getPrintAccess().getValueStringValueParserRuleCall_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getPrimaryExpressionParserRuleCall_0()); }
		rulePrimaryExpression
		{ after(grammarAccess.getExpressionAccess().getPrimaryExpressionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getBinexprParserRuleCall_1()); }
		ruleBinexpr
		{ after(grammarAccess.getExpressionAccess().getBinexprParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getNoneValueParserRuleCall_2()); }
		ruleNoneValue
		{ after(grammarAccess.getExpressionAccess().getNoneValueParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getIntValueParserRuleCall_0()); }
		ruleIntValue
		{ after(grammarAccess.getPrimaryExpressionAccess().getIntValueParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getSelectcellParserRuleCall_1()); }
		ruleSelectcell
		{ after(grammarAccess.getPrimaryExpressionAccess().getSelectcellParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getLinesumParserRuleCall_2()); }
		ruleLinesum
		{ after(grammarAccess.getPrimaryExpressionAccess().getLinesumParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getColsumParserRuleCall_3()); }
		ruleColsum
		{ after(grammarAccess.getPrimaryExpressionAccess().getColsumParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getLineprodParserRuleCall_4()); }
		ruleLineprod
		{ after(grammarAccess.getPrimaryExpressionAccess().getLineprodParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getColprodParserRuleCall_5()); }
		ruleColprod
		{ after(grammarAccess.getPrimaryExpressionAccess().getColprodParserRuleCall_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Colsum__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColsumAccess().getGroup_0()); }
		(rule__Colsum__Group_0__0)
		{ after(grammarAccess.getColsumAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getColsumAccess().getGroup_1()); }
		(rule__Colsum__Group_1__0)
		{ after(grammarAccess.getColsumAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Colprod__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColprodAccess().getGroup_0()); }
		(rule__Colprod__Group_0__0)
		{ after(grammarAccess.getColprodAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getColprodAccess().getGroup_1()); }
		(rule__Colprod__Group_1__0)
		{ after(grammarAccess.getColprodAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Op__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOpAccess().getPlusSignKeyword_0()); }
		'+'
		{ after(grammarAccess.getOpAccess().getPlusSignKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getOpAccess().getHyphenMinusKeyword_1()); }
		'-'
		{ after(grammarAccess.getOpAccess().getHyphenMinusKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getOpAccess().getAsteriskKeyword_2()); }
		'*'
		{ after(grammarAccess.getOpAccess().getAsteriskKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getOpAccess().getSolidusKeyword_3()); }
		'/'
		{ after(grammarAccess.getOpAccess().getSolidusKeyword_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Load__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Load__Group__0__Impl
	rule__Load__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Load__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoadAccess().getLoadKeyword_0()); }
	'Load('
	{ after(grammarAccess.getLoadAccess().getLoadKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Load__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Load__Group__1__Impl
	rule__Load__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Load__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoadAccess().getPathAssignment_1()); }
	(rule__Load__PathAssignment_1)
	{ after(grammarAccess.getLoadAccess().getPathAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Load__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Load__Group__2__Impl
	rule__Load__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Load__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoadAccess().getRightParenthesisKeyword_2()); }
	')'
	{ after(grammarAccess.getLoadAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Load__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Load__Group__3__Impl
	rule__Load__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Load__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoadAccess().getLeftCurlyBracketKeyword_3()); }
	'{'
	{ after(grammarAccess.getLoadAccess().getLeftCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Load__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Load__Group__4__Impl
	rule__Load__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Load__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoadAccess().getInstructionsAssignment_4()); }
	(rule__Load__InstructionsAssignment_4)*
	{ after(grammarAccess.getLoadAccess().getInstructionsAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Load__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Load__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Load__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoadAccess().getRightCurlyBracketKeyword_5()); }
	'}'
	{ after(grammarAccess.getLoadAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Create__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Create__Group__0__Impl
	rule__Create__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Create__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCreateAccess().getCreateKeyword_0()); }
	'Create()'
	{ after(grammarAccess.getCreateAccess().getCreateKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Create__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Create__Group__1__Impl
	rule__Create__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Create__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCreateAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getCreateAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Create__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Create__Group__2__Impl
	rule__Create__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Create__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCreateAccess().getInstructionsAssignment_2()); }
	(rule__Create__InstructionsAssignment_2)*
	{ after(grammarAccess.getCreateAccess().getInstructionsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Create__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Create__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Create__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCreateAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getCreateAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Instruction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Instruction__Group__0__Impl
	rule__Instruction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstructionAccess().getAlternatives_0()); }
	(rule__Instruction__Alternatives_0)
	{ after(grammarAccess.getInstructionAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Instruction__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstructionAccess().getSemicolonKeyword_1()); }
	';'
	{ after(grammarAccess.getInstructionAccess().getSemicolonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InsertCol__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InsertCol__Group__0__Impl
	rule__InsertCol__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InsertCol__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertColAccess().getInsertColKeyword_0()); }
	'InsertCol('
	{ after(grammarAccess.getInsertColAccess().getInsertColKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InsertCol__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InsertCol__Group__1__Impl
	rule__InsertCol__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InsertCol__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertColAccess().getColIndexAssignment_1()); }
	(rule__InsertCol__ColIndexAssignment_1)
	{ after(grammarAccess.getInsertColAccess().getColIndexAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InsertCol__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InsertCol__Group__2__Impl
	rule__InsertCol__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__InsertCol__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertColAccess().getCommaKeyword_2()); }
	','
	{ after(grammarAccess.getInsertColAccess().getCommaKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InsertCol__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InsertCol__Group__3__Impl
	rule__InsertCol__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__InsertCol__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertColAccess().getColNameAssignment_3()); }
	(rule__InsertCol__ColNameAssignment_3)
	{ after(grammarAccess.getInsertColAccess().getColNameAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InsertCol__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InsertCol__Group__4__Impl
	rule__InsertCol__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__InsertCol__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertColAccess().getGroup_4()); }
	(rule__InsertCol__Group_4__0)?
	{ after(grammarAccess.getInsertColAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InsertCol__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InsertCol__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InsertCol__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertColAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getInsertColAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InsertCol__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InsertCol__Group_4__0__Impl
	rule__InsertCol__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InsertCol__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertColAccess().getCommaKeyword_4_0()); }
	','
	{ after(grammarAccess.getInsertColAccess().getCommaKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InsertCol__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InsertCol__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InsertCol__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertColAccess().getExpAssignment_4_1()); }
	(rule__InsertCol__ExpAssignment_4_1)
	{ after(grammarAccess.getInsertColAccess().getExpAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RemoveCol__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RemoveCol__Group_0__0__Impl
	rule__RemoveCol__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RemoveCol__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRemoveColAccess().getRemoveColKeyword_0_0()); }
	'RemoveCol('
	{ after(grammarAccess.getRemoveColAccess().getRemoveColKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RemoveCol__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RemoveCol__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RemoveCol__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRemoveColAccess().getColIndexAssignment_0_1()); }
	(rule__RemoveCol__ColIndexAssignment_0_1)
	{ after(grammarAccess.getRemoveColAccess().getColIndexAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RemoveCol__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RemoveCol__Group_1__0__Impl
	rule__RemoveCol__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RemoveCol__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRemoveColAccess().getNameAssignment_1_0()); }
	(rule__RemoveCol__NameAssignment_1_0)
	{ after(grammarAccess.getRemoveColAccess().getNameAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RemoveCol__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RemoveCol__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RemoveCol__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRemoveColAccess().getRightParenthesisKeyword_1_1()); }
	')'
	{ after(grammarAccess.getRemoveColAccess().getRightParenthesisKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InsertLine__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InsertLine__Group__0__Impl
	rule__InsertLine__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InsertLine__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertLineAccess().getInsertLineKeyword_0()); }
	'InsertLine('
	{ after(grammarAccess.getInsertLineAccess().getInsertLineKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InsertLine__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InsertLine__Group__1__Impl
	rule__InsertLine__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InsertLine__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertLineAccess().getLineIndexAssignment_1()); }
	(rule__InsertLine__LineIndexAssignment_1)
	{ after(grammarAccess.getInsertLineAccess().getLineIndexAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InsertLine__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InsertLine__Group__2__Impl
	rule__InsertLine__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__InsertLine__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getInsertLineAccess().getGroup_2()); }
		(rule__InsertLine__Group_2__0)
		{ after(grammarAccess.getInsertLineAccess().getGroup_2()); }
	)
	(
		{ before(grammarAccess.getInsertLineAccess().getGroup_2()); }
		(rule__InsertLine__Group_2__0)*
		{ after(grammarAccess.getInsertLineAccess().getGroup_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InsertLine__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InsertLine__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InsertLine__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertLineAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getInsertLineAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InsertLine__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InsertLine__Group_2__0__Impl
	rule__InsertLine__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InsertLine__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertLineAccess().getCommaKeyword_2_0()); }
	','
	{ after(grammarAccess.getInsertLineAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InsertLine__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InsertLine__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InsertLine__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertLineAccess().getExpsAssignment_2_1()); }
	(rule__InsertLine__ExpsAssignment_2_1)
	{ after(grammarAccess.getInsertLineAccess().getExpsAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RemoveLine__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RemoveLine__Group__0__Impl
	rule__RemoveLine__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RemoveLine__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRemoveLineAccess().getRemoveLineKeyword_0()); }
	'RemoveLine('
	{ after(grammarAccess.getRemoveLineAccess().getRemoveLineKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RemoveLine__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RemoveLine__Group__1__Impl
	rule__RemoveLine__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RemoveLine__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRemoveLineAccess().getLineIndexAssignment_1()); }
	(rule__RemoveLine__LineIndexAssignment_1)
	{ after(grammarAccess.getRemoveLineAccess().getLineIndexAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RemoveLine__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RemoveLine__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RemoveLine__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRemoveLineAccess().getRightParenthesisKeyword_2()); }
	')'
	{ after(grammarAccess.getRemoveLineAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Insert__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Insert__Group__0__Impl
	rule__Insert__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertAccess().getInsertKeyword_0()); }
	'Insert('
	{ after(grammarAccess.getInsertAccess().getInsertKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Insert__Group__1__Impl
	rule__Insert__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertAccess().getLineIndexAssignment_1()); }
	(rule__Insert__LineIndexAssignment_1)
	{ after(grammarAccess.getInsertAccess().getLineIndexAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Insert__Group__2__Impl
	rule__Insert__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertAccess().getCommaKeyword_2()); }
	','
	{ after(grammarAccess.getInsertAccess().getCommaKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Insert__Group__3__Impl
	rule__Insert__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertAccess().getColNameOrIndexAssignment_3()); }
	(rule__Insert__ColNameOrIndexAssignment_3)
	{ after(grammarAccess.getInsertAccess().getColNameOrIndexAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Insert__Group__4__Impl
	rule__Insert__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertAccess().getCommaKeyword_4()); }
	','
	{ after(grammarAccess.getInsertAccess().getCommaKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Insert__Group__5__Impl
	rule__Insert__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertAccess().getValueAssignment_5()); }
	(rule__Insert__ValueAssignment_5)
	{ after(grammarAccess.getInsertAccess().getValueAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Insert__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertAccess().getRightParenthesisKeyword_6()); }
	')'
	{ after(grammarAccess.getInsertAccess().getRightParenthesisKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Print__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Print__Group__0__Impl
	rule__Print__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintAccess().getPrintKeyword_0()); }
	'Print('
	{ after(grammarAccess.getPrintAccess().getPrintKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Print__Group__1__Impl
	rule__Print__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintAccess().getValueAssignment_1()); }
	(rule__Print__ValueAssignment_1)
	{ after(grammarAccess.getPrintAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Print__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintAccess().getRightParenthesisKeyword_2()); }
	')'
	{ after(grammarAccess.getPrintAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExportCSV__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExportCSV__Group__0__Impl
	rule__ExportCSV__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExportCSV__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExportCSVAccess().getStoreKeyword_0()); }
	'Store('
	{ after(grammarAccess.getExportCSVAccess().getStoreKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExportCSV__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExportCSV__Group__1__Impl
	rule__ExportCSV__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExportCSV__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExportCSVAccess().getPathAssignment_1()); }
	(rule__ExportCSV__PathAssignment_1)
	{ after(grammarAccess.getExportCSVAccess().getPathAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExportCSV__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExportCSV__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExportCSV__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExportCSVAccess().getRightParenthesisKeyword_2()); }
	')'
	{ after(grammarAccess.getExportCSVAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExportJSON__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExportJSON__Group__0__Impl
	rule__ExportJSON__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExportJSON__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExportJSONAccess().getExportKeyword_0()); }
	'Export('
	{ after(grammarAccess.getExportJSONAccess().getExportKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExportJSON__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExportJSON__Group__1__Impl
	rule__ExportJSON__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExportJSON__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExportJSONAccess().getPathAssignment_1()); }
	(rule__ExportJSON__PathAssignment_1)
	{ after(grammarAccess.getExportJSONAccess().getPathAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExportJSON__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExportJSON__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExportJSON__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExportJSONAccess().getRightParenthesisKeyword_2()); }
	')'
	{ after(grammarAccess.getExportJSONAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Selectcell__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Selectcell__Group__0__Impl
	rule__Selectcell__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Selectcell__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectcellAccess().getSelectcellKeyword_0()); }
	'Selectcell('
	{ after(grammarAccess.getSelectcellAccess().getSelectcellKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selectcell__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Selectcell__Group__1__Impl
	rule__Selectcell__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Selectcell__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectcellAccess().getCellXAssignment_1()); }
	(rule__Selectcell__CellXAssignment_1)
	{ after(grammarAccess.getSelectcellAccess().getCellXAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selectcell__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Selectcell__Group__2__Impl
	rule__Selectcell__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Selectcell__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectcellAccess().getCommaKeyword_2()); }
	','
	{ after(grammarAccess.getSelectcellAccess().getCommaKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selectcell__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Selectcell__Group__3__Impl
	rule__Selectcell__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Selectcell__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectcellAccess().getCellYAssignment_3()); }
	(rule__Selectcell__CellYAssignment_3)
	{ after(grammarAccess.getSelectcellAccess().getCellYAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selectcell__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Selectcell__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Selectcell__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectcellAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getSelectcellAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Linesum__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Linesum__Group__0__Impl
	rule__Linesum__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Linesum__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLinesumAccess().getLinesumKeyword_0()); }
	'Linesum('
	{ after(grammarAccess.getLinesumAccess().getLinesumKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Linesum__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Linesum__Group__1__Impl
	rule__Linesum__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Linesum__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLinesumAccess().getLineIndexAssignment_1()); }
	(rule__Linesum__LineIndexAssignment_1)
	{ after(grammarAccess.getLinesumAccess().getLineIndexAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Linesum__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Linesum__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Linesum__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLinesumAccess().getRightParenthesisKeyword_2()); }
	')'
	{ after(grammarAccess.getLinesumAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Colsum__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Colsum__Group_0__0__Impl
	rule__Colsum__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Colsum__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColsumAccess().getColsumKeyword_0_0()); }
	'Colsum('
	{ after(grammarAccess.getColsumAccess().getColsumKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Colsum__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Colsum__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Colsum__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColsumAccess().getColIndexAssignment_0_1()); }
	(rule__Colsum__ColIndexAssignment_0_1)
	{ after(grammarAccess.getColsumAccess().getColIndexAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Colsum__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Colsum__Group_1__0__Impl
	rule__Colsum__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Colsum__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColsumAccess().getNameAssignment_1_0()); }
	(rule__Colsum__NameAssignment_1_0)
	{ after(grammarAccess.getColsumAccess().getNameAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Colsum__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Colsum__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Colsum__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColsumAccess().getRightParenthesisKeyword_1_1()); }
	')'
	{ after(grammarAccess.getColsumAccess().getRightParenthesisKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Lineprod__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Lineprod__Group__0__Impl
	rule__Lineprod__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Lineprod__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLineprodAccess().getLineprodKeyword_0()); }
	'Lineprod('
	{ after(grammarAccess.getLineprodAccess().getLineprodKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Lineprod__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Lineprod__Group__1__Impl
	rule__Lineprod__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Lineprod__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLineprodAccess().getLineIndexAssignment_1()); }
	(rule__Lineprod__LineIndexAssignment_1)
	{ after(grammarAccess.getLineprodAccess().getLineIndexAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Lineprod__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Lineprod__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Lineprod__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLineprodAccess().getRightParenthesisKeyword_2()); }
	')'
	{ after(grammarAccess.getLineprodAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Colprod__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Colprod__Group_0__0__Impl
	rule__Colprod__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Colprod__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColprodAccess().getColprodKeyword_0_0()); }
	'Colprod('
	{ after(grammarAccess.getColprodAccess().getColprodKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Colprod__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Colprod__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Colprod__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColprodAccess().getColIndexAssignment_0_1()); }
	(rule__Colprod__ColIndexAssignment_0_1)
	{ after(grammarAccess.getColprodAccess().getColIndexAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Colprod__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Colprod__Group_1__0__Impl
	rule__Colprod__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Colprod__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColprodAccess().getNameAssignment_1_0()); }
	(rule__Colprod__NameAssignment_1_0)
	{ after(grammarAccess.getColprodAccess().getNameAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Colprod__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Colprod__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Colprod__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColprodAccess().getRightParenthesisKeyword_1_1()); }
	')'
	{ after(grammarAccess.getColprodAccess().getRightParenthesisKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Binexpr__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Binexpr__Group__0__Impl
	rule__Binexpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Binexpr__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBinexprAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getBinexprAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Binexpr__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Binexpr__Group__1__Impl
	rule__Binexpr__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Binexpr__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBinexprAccess().getLeftAssignment_1()); }
	(rule__Binexpr__LeftAssignment_1)
	{ after(grammarAccess.getBinexprAccess().getLeftAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Binexpr__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Binexpr__Group__2__Impl
	rule__Binexpr__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Binexpr__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBinexprAccess().getOpAssignment_2()); }
	(rule__Binexpr__OpAssignment_2)
	{ after(grammarAccess.getBinexprAccess().getOpAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Binexpr__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Binexpr__Group__3__Impl
	rule__Binexpr__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Binexpr__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBinexprAccess().getRightAssignment_3()); }
	(rule__Binexpr__RightAssignment_3)
	{ after(grammarAccess.getBinexprAccess().getRightAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Binexpr__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Binexpr__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Binexpr__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBinexprAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getBinexprAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Programme__LoadscopesAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgrammeAccess().getLoadscopesLoadscopeParserRuleCall_0()); }
		ruleLoadscope
		{ after(grammarAccess.getProgrammeAccess().getLoadscopesLoadscopeParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Load__PathAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLoadAccess().getPathSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getLoadAccess().getPathSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Load__InstructionsAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLoadAccess().getInstructionsInstructionParserRuleCall_4_0()); }
		ruleInstruction
		{ after(grammarAccess.getLoadAccess().getInstructionsInstructionParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Create__InstructionsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCreateAccess().getInstructionsInstructionParserRuleCall_2_0()); }
		ruleInstruction
		{ after(grammarAccess.getCreateAccess().getInstructionsInstructionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InsertCol__ColIndexAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInsertColAccess().getColIndexExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getInsertColAccess().getColIndexExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InsertCol__ColNameAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInsertColAccess().getColNameSTRINGTerminalRuleCall_3_0()); }
		RULE_STRING
		{ after(grammarAccess.getInsertColAccess().getColNameSTRINGTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InsertCol__ExpAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInsertColAccess().getExpExpressionParserRuleCall_4_1_0()); }
		ruleExpression
		{ after(grammarAccess.getInsertColAccess().getExpExpressionParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RemoveCol__ColIndexAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRemoveColAccess().getColIndexExpressionParserRuleCall_0_1_0()); }
		ruleExpression
		{ after(grammarAccess.getRemoveColAccess().getColIndexExpressionParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RemoveCol__NameAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRemoveColAccess().getNameSTRINGTerminalRuleCall_1_0_0()); }
		RULE_STRING
		{ after(grammarAccess.getRemoveColAccess().getNameSTRINGTerminalRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InsertLine__LineIndexAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInsertLineAccess().getLineIndexExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getInsertLineAccess().getLineIndexExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InsertLine__ExpsAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInsertLineAccess().getExpsExpressionParserRuleCall_2_1_0()); }
		ruleExpression
		{ after(grammarAccess.getInsertLineAccess().getExpsExpressionParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RemoveLine__LineIndexAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRemoveLineAccess().getLineIndexExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getRemoveLineAccess().getLineIndexExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__LineIndexAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInsertAccess().getLineIndexExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getInsertAccess().getLineIndexExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__ColNameOrIndexAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInsertAccess().getColNameOrIndexExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getInsertAccess().getColNameOrIndexExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__ValueAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInsertAccess().getValueAlternatives_5_0()); }
		(rule__Insert__ValueAlternatives_5_0)
		{ after(grammarAccess.getInsertAccess().getValueAlternatives_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrintAccess().getValueAlternatives_1_0()); }
		(rule__Print__ValueAlternatives_1_0)
		{ after(grammarAccess.getPrintAccess().getValueAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExportCSV__PathAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExportCSVAccess().getPathSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getExportCSVAccess().getPathSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExportJSON__PathAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExportJSONAccess().getPathSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getExportJSONAccess().getPathSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selectcell__CellXAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectcellAccess().getCellXExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getSelectcellAccess().getCellXExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selectcell__CellYAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectcellAccess().getCellYExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getSelectcellAccess().getCellYExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Linesum__LineIndexAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLinesumAccess().getLineIndexExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getLinesumAccess().getLineIndexExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Colsum__ColIndexAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColsumAccess().getColIndexExpressionParserRuleCall_0_1_0()); }
		ruleExpression
		{ after(grammarAccess.getColsumAccess().getColIndexExpressionParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Colsum__NameAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColsumAccess().getNameSTRINGTerminalRuleCall_1_0_0()); }
		RULE_STRING
		{ after(grammarAccess.getColsumAccess().getNameSTRINGTerminalRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Lineprod__LineIndexAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLineprodAccess().getLineIndexExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getLineprodAccess().getLineIndexExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Colprod__ColIndexAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColprodAccess().getColIndexExpressionParserRuleCall_0_1_0()); }
		ruleExpression
		{ after(grammarAccess.getColprodAccess().getColIndexExpressionParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Colprod__NameAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColprodAccess().getNameSTRINGTerminalRuleCall_1_0_0()); }
		RULE_STRING
		{ after(grammarAccess.getColprodAccess().getNameSTRINGTerminalRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Binexpr__LeftAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBinexprAccess().getLeftPrimaryExpressionParserRuleCall_1_0()); }
		rulePrimaryExpression
		{ after(grammarAccess.getBinexprAccess().getLeftPrimaryExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Binexpr__OpAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBinexprAccess().getOpOpParserRuleCall_2_0()); }
		ruleOp
		{ after(grammarAccess.getBinexprAccess().getOpOpParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Binexpr__RightAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBinexprAccess().getRightExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getBinexprAccess().getRightExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NoneValue__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNoneValueAccess().getValueNoneKeyword_0()); }
		(
			{ before(grammarAccess.getNoneValueAccess().getValueNoneKeyword_0()); }
			'None'
			{ after(grammarAccess.getNoneValueAccess().getValueNoneKeyword_0()); }
		)
		{ after(grammarAccess.getNoneValueAccess().getValueNoneKeyword_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntValue__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntValueAccess().getValueINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getIntValueAccess().getValueINTTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringValue__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
