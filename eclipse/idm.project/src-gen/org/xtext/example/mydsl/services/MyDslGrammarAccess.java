/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ProgrammeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Programme");
		private final Assignment cLoadscopesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cLoadscopesLoadscopeParserRuleCall_0 = (RuleCall)cLoadscopesAssignment.eContents().get(0);
		
		//Programme:
		//    loadscopes+=Loadscope*;
		@Override public ParserRule getRule() { return rule; }
		
		//loadscopes+=Loadscope*
		public Assignment getLoadscopesAssignment() { return cLoadscopesAssignment; }
		
		//Loadscope
		public RuleCall getLoadscopesLoadscopeParserRuleCall_0() { return cLoadscopesLoadscopeParserRuleCall_0; }
	}
	public class LoadscopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Loadscope");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLoadParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCreateParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Loadscope :
		//    Load | Create
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Load | Create
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Load
		public RuleCall getLoadParserRuleCall_0() { return cLoadParserRuleCall_0; }
		
		//Create
		public RuleCall getCreateParserRuleCall_1() { return cCreateParserRuleCall_1; }
	}
	public class LoadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Load");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLoadKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPathAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPathStringValueParserRuleCall_1_0 = (RuleCall)cPathAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInstructionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInstructionsInstructionParserRuleCall_4_0 = (RuleCall)cInstructionsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Load :
		//    'Load(' path=StringValue ')' '{' instructions+=Instruction* '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Load(' path=StringValue ')' '{' instructions+=Instruction* '}'
		public Group getGroup() { return cGroup; }
		
		//'Load('
		public Keyword getLoadKeyword_0() { return cLoadKeyword_0; }
		
		//path=StringValue
		public Assignment getPathAssignment_1() { return cPathAssignment_1; }
		
		//StringValue
		public RuleCall getPathStringValueParserRuleCall_1_0() { return cPathStringValueParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//instructions+=Instruction*
		public Assignment getInstructionsAssignment_4() { return cInstructionsAssignment_4; }
		
		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_4_0() { return cInstructionsInstructionParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class CreateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Create");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCreateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInstructionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInstructionsInstructionParserRuleCall_2_0 = (RuleCall)cInstructionsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Create :
		//    'Create()' '{' instructions+=Instruction* '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Create()' '{' instructions+=Instruction* '}'
		public Group getGroup() { return cGroup; }
		
		//'Create()'
		public Keyword getCreateKeyword_0() { return cCreateKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//instructions+=Instruction*
		public Assignment getInstructionsAssignment_2() { return cInstructionsAssignment_2; }
		
		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_2_0() { return cInstructionsInstructionParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Instruction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cInsertLineParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cRemoveLineParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cInsertColParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cRemoveColParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final RuleCall cInsertParserRuleCall_0_4 = (RuleCall)cAlternatives_0.eContents().get(4);
		private final RuleCall cExportJSONParserRuleCall_0_5 = (RuleCall)cAlternatives_0.eContents().get(5);
		private final RuleCall cExportCSVParserRuleCall_0_6 = (RuleCall)cAlternatives_0.eContents().get(6);
		private final RuleCall cPrintParserRuleCall_0_7 = (RuleCall)cAlternatives_0.eContents().get(7);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Instruction :
		//     ( InsertLine | RemoveLine | InsertCol | RemoveCol | Insert | ExportJSON | ExportCSV | Print) ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( InsertLine | RemoveLine | InsertCol | RemoveCol | Insert | ExportJSON | ExportCSV | Print) ';'
		public Group getGroup() { return cGroup; }
		
		//( InsertLine | RemoveLine | InsertCol | RemoveCol | Insert | ExportJSON | ExportCSV | Print)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//InsertLine
		public RuleCall getInsertLineParserRuleCall_0_0() { return cInsertLineParserRuleCall_0_0; }
		
		//RemoveLine
		public RuleCall getRemoveLineParserRuleCall_0_1() { return cRemoveLineParserRuleCall_0_1; }
		
		//InsertCol
		public RuleCall getInsertColParserRuleCall_0_2() { return cInsertColParserRuleCall_0_2; }
		
		//RemoveCol
		public RuleCall getRemoveColParserRuleCall_0_3() { return cRemoveColParserRuleCall_0_3; }
		
		//Insert
		public RuleCall getInsertParserRuleCall_0_4() { return cInsertParserRuleCall_0_4; }
		
		//ExportJSON
		public RuleCall getExportJSONParserRuleCall_0_5() { return cExportJSONParserRuleCall_0_5; }
		
		//ExportCSV
		public RuleCall getExportCSVParserRuleCall_0_6() { return cExportCSVParserRuleCall_0_6; }
		
		//Print
		public RuleCall getPrintParserRuleCall_0_7() { return cPrintParserRuleCall_0_7; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class InsertColElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.InsertCol");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInsertColKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cColIndexAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cColIndexMathExpressionParserRuleCall_1_0 = (RuleCall)cColIndexAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cColNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cColNameStringValueParserRuleCall_3_0 = (RuleCall)cColNameAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// Insere une col a l'index colIndex avec le nom colName
		//InsertCol : //insert col at INT with name STRING
		//    'InsertCol(' colIndex=MathExpression ',' colName=StringValue ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////insert col at INT with name STRING
		//   'InsertCol(' colIndex=MathExpression ',' colName=StringValue ')'
		public Group getGroup() { return cGroup; }
		
		////insert col at INT with name STRING
		//   'InsertCol('
		public Keyword getInsertColKeyword_0() { return cInsertColKeyword_0; }
		
		//colIndex=MathExpression
		public Assignment getColIndexAssignment_1() { return cColIndexAssignment_1; }
		
		//MathExpression
		public RuleCall getColIndexMathExpressionParserRuleCall_1_0() { return cColIndexMathExpressionParserRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//colName=StringValue
		public Assignment getColNameAssignment_3() { return cColNameAssignment_3; }
		
		//StringValue
		public RuleCall getColNameStringValueParserRuleCall_3_0() { return cColNameStringValueParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class RemoveColElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.RemoveCol");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRemoveColKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cColNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cColNameStringValueParserRuleCall_1_0 = (RuleCall)cColNameAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//// supprime la col a l'index colIndex, ou avec le nom name
		//RemoveCol :
		//    'RemoveCol(' colName=StringValue')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'RemoveCol(' colName=StringValue')'
		public Group getGroup() { return cGroup; }
		
		//'RemoveCol('
		public Keyword getRemoveColKeyword_0() { return cRemoveColKeyword_0; }
		
		//colName=StringValue
		public Assignment getColNameAssignment_1() { return cColNameAssignment_1; }
		
		//StringValue
		public RuleCall getColNameStringValueParserRuleCall_1_0() { return cColNameStringValueParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class InsertLineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.InsertLine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInsertLineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLineIndexAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLineIndexMathExpressionParserRuleCall_1_0 = (RuleCall)cLineIndexAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//// Insere une nouvelle ligne a l'index lineIndex
		//InsertLine :
		//    'InsertLine(' lineIndex=MathExpression')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'InsertLine(' lineIndex=MathExpression')'
		public Group getGroup() { return cGroup; }
		
		//'InsertLine('
		public Keyword getInsertLineKeyword_0() { return cInsertLineKeyword_0; }
		
		//lineIndex=MathExpression
		public Assignment getLineIndexAssignment_1() { return cLineIndexAssignment_1; }
		
		//MathExpression
		public RuleCall getLineIndexMathExpressionParserRuleCall_1_0() { return cLineIndexMathExpressionParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class RemoveLineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.RemoveLine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRemoveLineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLineIndexAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLineIndexMathExpressionParserRuleCall_1_0 = (RuleCall)cLineIndexAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//// Suprime la lingne a l'index lineIndex
		//RemoveLine :
		//    'RemoveLine(' lineIndex=MathExpression ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'RemoveLine(' lineIndex=MathExpression ')'
		public Group getGroup() { return cGroup; }
		
		//'RemoveLine('
		public Keyword getRemoveLineKeyword_0() { return cRemoveLineKeyword_0; }
		
		//lineIndex=MathExpression
		public Assignment getLineIndexAssignment_1() { return cLineIndexAssignment_1; }
		
		//MathExpression
		public RuleCall getLineIndexMathExpressionParserRuleCall_1_0() { return cLineIndexMathExpressionParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class InsertElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Insert");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInsertKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLineIndexAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLineIndexMathExpressionParserRuleCall_1_0 = (RuleCall)cLineIndexAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cColNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cColNameStringValueParserRuleCall_3_0 = (RuleCall)cColNameAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValueExpressionParserRuleCall_5_0 = (RuleCall)cValueAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// Change la valeur a la ligne avec l'index lineIndex, le nom colNameOrIndex et avec la valeur value
		//Insert :
		//    'Insert(' lineIndex=MathExpression ',' colName=StringValue ',' value=Expression ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Insert(' lineIndex=MathExpression ',' colName=StringValue ',' value=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'Insert('
		public Keyword getInsertKeyword_0() { return cInsertKeyword_0; }
		
		//lineIndex=MathExpression
		public Assignment getLineIndexAssignment_1() { return cLineIndexAssignment_1; }
		
		//MathExpression
		public RuleCall getLineIndexMathExpressionParserRuleCall_1_0() { return cLineIndexMathExpressionParserRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//colName=StringValue
		public Assignment getColNameAssignment_3() { return cColNameAssignment_3; }
		
		//StringValue
		public RuleCall getColNameStringValueParserRuleCall_3_0() { return cColNameStringValueParserRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//value=Expression
		public Assignment getValueAssignment_5() { return cValueAssignment_5; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_5_0() { return cValueExpressionParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class PrintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Print");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueExpressionParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Print :
		//    'Print('value=Expression')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Print('value=Expression')'
		public Group getGroup() { return cGroup; }
		
		//'Print('
		public Keyword getPrintKeyword_0() { return cPrintKeyword_0; }
		
		//value=Expression
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_1_0() { return cValueExpressionParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class ExportCSVElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ExportCSV");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStoreKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPathAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPathStringValueParserRuleCall_1_0 = (RuleCall)cPathAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ExportCSV :
		//    'Store('path=StringValue')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Store('path=StringValue')'
		public Group getGroup() { return cGroup; }
		
		//'Store('
		public Keyword getStoreKeyword_0() { return cStoreKeyword_0; }
		
		//path=StringValue
		public Assignment getPathAssignment_1() { return cPathAssignment_1; }
		
		//StringValue
		public RuleCall getPathStringValueParserRuleCall_1_0() { return cPathStringValueParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class ExportJSONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ExportJSON");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPathAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPathStringValueParserRuleCall_1_0 = (RuleCall)cPathAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ExportJSON :
		//    'Export('path=StringValue')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Export('path=StringValue')'
		public Group getGroup() { return cGroup; }
		
		//'Export('
		public Keyword getExportKeyword_0() { return cExportKeyword_0; }
		
		//path=StringValue
		public Assignment getPathAssignment_1() { return cPathAssignment_1; }
		
		//StringValue
		public RuleCall getPathStringValueParserRuleCall_1_0() { return cPathStringValueParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMathPrimaryExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBinaryExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNoneValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStringValueParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Expression : MathPrimaryExpression | BinaryExpression | NoneValue | StringValue;
		@Override public ParserRule getRule() { return rule; }
		
		//MathPrimaryExpression | BinaryExpression | NoneValue | StringValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MathPrimaryExpression
		public RuleCall getMathPrimaryExpressionParserRuleCall_0() { return cMathPrimaryExpressionParserRuleCall_0; }
		
		//BinaryExpression
		public RuleCall getBinaryExpressionParserRuleCall_1() { return cBinaryExpressionParserRuleCall_1; }
		
		//NoneValue
		public RuleCall getNoneValueParserRuleCall_2() { return cNoneValueParserRuleCall_2; }
		
		//StringValue
		public RuleCall getStringValueParserRuleCall_3() { return cStringValueParserRuleCall_3; }
	}
	public class MathExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.MathExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMathPrimaryExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBinaryExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//MathExpression :
		//    (MathPrimaryExpression | BinaryExpression)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(MathPrimaryExpression | BinaryExpression)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MathPrimaryExpression
		public RuleCall getMathPrimaryExpressionParserRuleCall_0() { return cMathPrimaryExpressionParserRuleCall_0; }
		
		//BinaryExpression
		public RuleCall getBinaryExpressionParserRuleCall_1() { return cBinaryExpressionParserRuleCall_1; }
	}
	public class BinaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.BinaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftMathPrimaryExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Assignment cOpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOpOpParserRuleCall_2_0 = (RuleCall)cOpAssignment_2.eContents().get(0);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightMathExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//BinaryExpression :
		//    '(' left=MathPrimaryExpression op=Op right=MathExpression ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' left=MathPrimaryExpression op=Op right=MathExpression ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//left=MathPrimaryExpression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//MathPrimaryExpression
		public RuleCall getLeftMathPrimaryExpressionParserRuleCall_1_0() { return cLeftMathPrimaryExpressionParserRuleCall_1_0; }
		
		//op=Op
		public Assignment getOpAssignment_2() { return cOpAssignment_2; }
		
		//Op
		public RuleCall getOpOpParserRuleCall_2_0() { return cOpOpParserRuleCall_2_0; }
		
		//right=MathExpression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//MathExpression
		public RuleCall getRightMathExpressionParserRuleCall_3_0() { return cRightMathExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class MathPrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.MathPrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSelectcellParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLinesumParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cColsumParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLineprodParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cColprodParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//MathPrimaryExpression :
		//    (IntValue | Selectcell | Linesum | Colsum | Lineprod | Colprod)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(IntValue | Selectcell | Linesum | Colsum | Lineprod | Colprod)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntValue
		public RuleCall getIntValueParserRuleCall_0() { return cIntValueParserRuleCall_0; }
		
		//Selectcell
		public RuleCall getSelectcellParserRuleCall_1() { return cSelectcellParserRuleCall_1; }
		
		//Linesum
		public RuleCall getLinesumParserRuleCall_2() { return cLinesumParserRuleCall_2; }
		
		//Colsum
		public RuleCall getColsumParserRuleCall_3() { return cColsumParserRuleCall_3; }
		
		//Lineprod
		public RuleCall getLineprodParserRuleCall_4() { return cLineprodParserRuleCall_4; }
		
		//Colprod
		public RuleCall getColprodParserRuleCall_5() { return cColprodParserRuleCall_5; }
	}
	public class SelectcellElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Selectcell");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelectcellKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLineIndexAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLineIndexMathExpressionParserRuleCall_1_0 = (RuleCall)cLineIndexAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cColNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cColNameStringValueParserRuleCall_3_0 = (RuleCall)cColNameAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Selectcell :
		//    'Selectcell('lineIndex=MathExpression','colName=StringValue')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Selectcell('lineIndex=MathExpression','colName=StringValue')'
		public Group getGroup() { return cGroup; }
		
		//'Selectcell('
		public Keyword getSelectcellKeyword_0() { return cSelectcellKeyword_0; }
		
		//lineIndex=MathExpression
		public Assignment getLineIndexAssignment_1() { return cLineIndexAssignment_1; }
		
		//MathExpression
		public RuleCall getLineIndexMathExpressionParserRuleCall_1_0() { return cLineIndexMathExpressionParserRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//colName=StringValue
		public Assignment getColNameAssignment_3() { return cColNameAssignment_3; }
		
		//StringValue
		public RuleCall getColNameStringValueParserRuleCall_3_0() { return cColNameStringValueParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class LinesumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Linesum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLinesumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLineIndexAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLineIndexMathExpressionParserRuleCall_1_0 = (RuleCall)cLineIndexAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Linesum: //somme de toutes les case de la ligne INT
		//    'Linesum('lineIndex=MathExpression')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////somme de toutes les case de la ligne INT
		//   'Linesum('lineIndex=MathExpression')'
		public Group getGroup() { return cGroup; }
		
		////somme de toutes les case de la ligne INT
		//   'Linesum('
		public Keyword getLinesumKeyword_0() { return cLinesumKeyword_0; }
		
		//lineIndex=MathExpression
		public Assignment getLineIndexAssignment_1() { return cLineIndexAssignment_1; }
		
		//MathExpression
		public RuleCall getLineIndexMathExpressionParserRuleCall_1_0() { return cLineIndexMathExpressionParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class ColsumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Colsum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColsumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cColNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cColNameStringValueParserRuleCall_1_0 = (RuleCall)cColNameAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Colsum : //somme de toutes les case de la col INT
		//    'Colsum('colName=StringValue')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////somme de toutes les case de la col INT
		//   'Colsum('colName=StringValue')'
		public Group getGroup() { return cGroup; }
		
		////somme de toutes les case de la col INT
		//   'Colsum('
		public Keyword getColsumKeyword_0() { return cColsumKeyword_0; }
		
		//colName=StringValue
		public Assignment getColNameAssignment_1() { return cColNameAssignment_1; }
		
		//StringValue
		public RuleCall getColNameStringValueParserRuleCall_1_0() { return cColNameStringValueParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class LineprodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Lineprod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLineprodKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLineIndexAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLineIndexMathExpressionParserRuleCall_1_0 = (RuleCall)cLineIndexAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Lineprod : //produit de toutes les case de la ligne INT
		//    'Lineprod('lineIndex=MathExpression')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////produit de toutes les case de la ligne INT
		//   'Lineprod('lineIndex=MathExpression')'
		public Group getGroup() { return cGroup; }
		
		////produit de toutes les case de la ligne INT
		//   'Lineprod('
		public Keyword getLineprodKeyword_0() { return cLineprodKeyword_0; }
		
		//lineIndex=MathExpression
		public Assignment getLineIndexAssignment_1() { return cLineIndexAssignment_1; }
		
		//MathExpression
		public RuleCall getLineIndexMathExpressionParserRuleCall_1_0() { return cLineIndexMathExpressionParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class ColprodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Colprod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColprodKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cColNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cColNameStringValueParserRuleCall_1_0 = (RuleCall)cColNameAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Colprod : //produit de toutes les case de la col INT
		//    'Colprod('colName=StringValue')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////produit de toutes les case de la col INT
		//   'Colprod('colName=StringValue')'
		public Group getGroup() { return cGroup; }
		
		////produit de toutes les case de la col INT
		//   'Colprod('
		public Keyword getColprodKeyword_0() { return cColprodKeyword_0; }
		
		//colName=StringValue
		public Assignment getColNameAssignment_1() { return cColNameAssignment_1; }
		
		//StringValue
		public RuleCall getColNameStringValueParserRuleCall_1_0() { return cColNameStringValueParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class OpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Op");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAsteriskKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cSolidusKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//Op :
		//    '+' | '-' | '*' | '/'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'+' | '-' | '*' | '/'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//'*'
		public Keyword getAsteriskKeyword_2() { return cAsteriskKeyword_2; }
		
		//'/'
		public Keyword getSolidusKeyword_3() { return cSolidusKeyword_3; }
	}
	public class NoneValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.NoneValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cValueNoneKeyword_0 = (Keyword)cValueAssignment.eContents().get(0);
		
		//NoneValue :
		//    value="None"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value="None"
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//"None"
		public Keyword getValueNoneKeyword_0() { return cValueNoneKeyword_0; }
	}
	public class IntValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.IntValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntValue :
		//    value=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.StringValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringValue :
		//    value=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	
	
	private final ProgrammeElements pProgramme;
	private final LoadscopeElements pLoadscope;
	private final LoadElements pLoad;
	private final CreateElements pCreate;
	private final InstructionElements pInstruction;
	private final InsertColElements pInsertCol;
	private final RemoveColElements pRemoveCol;
	private final InsertLineElements pInsertLine;
	private final RemoveLineElements pRemoveLine;
	private final InsertElements pInsert;
	private final PrintElements pPrint;
	private final ExportCSVElements pExportCSV;
	private final ExportJSONElements pExportJSON;
	private final ExpressionElements pExpression;
	private final MathExpressionElements pMathExpression;
	private final BinaryExpressionElements pBinaryExpression;
	private final MathPrimaryExpressionElements pMathPrimaryExpression;
	private final SelectcellElements pSelectcell;
	private final LinesumElements pLinesum;
	private final ColsumElements pColsum;
	private final LineprodElements pLineprod;
	private final ColprodElements pColprod;
	private final OpElements pOp;
	private final NoneValueElements pNoneValue;
	private final IntValueElements pIntValue;
	private final StringValueElements pStringValue;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgramme = new ProgrammeElements();
		this.pLoadscope = new LoadscopeElements();
		this.pLoad = new LoadElements();
		this.pCreate = new CreateElements();
		this.pInstruction = new InstructionElements();
		this.pInsertCol = new InsertColElements();
		this.pRemoveCol = new RemoveColElements();
		this.pInsertLine = new InsertLineElements();
		this.pRemoveLine = new RemoveLineElements();
		this.pInsert = new InsertElements();
		this.pPrint = new PrintElements();
		this.pExportCSV = new ExportCSVElements();
		this.pExportJSON = new ExportJSONElements();
		this.pExpression = new ExpressionElements();
		this.pMathExpression = new MathExpressionElements();
		this.pBinaryExpression = new BinaryExpressionElements();
		this.pMathPrimaryExpression = new MathPrimaryExpressionElements();
		this.pSelectcell = new SelectcellElements();
		this.pLinesum = new LinesumElements();
		this.pColsum = new ColsumElements();
		this.pLineprod = new LineprodElements();
		this.pColprod = new ColprodElements();
		this.pOp = new OpElements();
		this.pNoneValue = new NoneValueElements();
		this.pIntValue = new IntValueElements();
		this.pStringValue = new StringValueElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Programme:
	//    loadscopes+=Loadscope*;
	public ProgrammeElements getProgrammeAccess() {
		return pProgramme;
	}
	
	public ParserRule getProgrammeRule() {
		return getProgrammeAccess().getRule();
	}
	
	//Loadscope :
	//    Load | Create
	//;
	public LoadscopeElements getLoadscopeAccess() {
		return pLoadscope;
	}
	
	public ParserRule getLoadscopeRule() {
		return getLoadscopeAccess().getRule();
	}
	
	//Load :
	//    'Load(' path=StringValue ')' '{' instructions+=Instruction* '}'
	//;
	public LoadElements getLoadAccess() {
		return pLoad;
	}
	
	public ParserRule getLoadRule() {
		return getLoadAccess().getRule();
	}
	
	//Create :
	//    'Create()' '{' instructions+=Instruction* '}'
	//;
	public CreateElements getCreateAccess() {
		return pCreate;
	}
	
	public ParserRule getCreateRule() {
		return getCreateAccess().getRule();
	}
	
	//Instruction :
	//     ( InsertLine | RemoveLine | InsertCol | RemoveCol | Insert | ExportJSON | ExportCSV | Print) ';'
	//;
	public InstructionElements getInstructionAccess() {
		return pInstruction;
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}
	
	//// Insere une col a l'index colIndex avec le nom colName
	//InsertCol : //insert col at INT with name STRING
	//    'InsertCol(' colIndex=MathExpression ',' colName=StringValue ')'
	//;
	public InsertColElements getInsertColAccess() {
		return pInsertCol;
	}
	
	public ParserRule getInsertColRule() {
		return getInsertColAccess().getRule();
	}
	
	//// supprime la col a l'index colIndex, ou avec le nom name
	//RemoveCol :
	//    'RemoveCol(' colName=StringValue')'
	//;
	public RemoveColElements getRemoveColAccess() {
		return pRemoveCol;
	}
	
	public ParserRule getRemoveColRule() {
		return getRemoveColAccess().getRule();
	}
	
	//// Insere une nouvelle ligne a l'index lineIndex
	//InsertLine :
	//    'InsertLine(' lineIndex=MathExpression')'
	//;
	public InsertLineElements getInsertLineAccess() {
		return pInsertLine;
	}
	
	public ParserRule getInsertLineRule() {
		return getInsertLineAccess().getRule();
	}
	
	//// Suprime la lingne a l'index lineIndex
	//RemoveLine :
	//    'RemoveLine(' lineIndex=MathExpression ')'
	//;
	public RemoveLineElements getRemoveLineAccess() {
		return pRemoveLine;
	}
	
	public ParserRule getRemoveLineRule() {
		return getRemoveLineAccess().getRule();
	}
	
	//// Change la valeur a la ligne avec l'index lineIndex, le nom colNameOrIndex et avec la valeur value
	//Insert :
	//    'Insert(' lineIndex=MathExpression ',' colName=StringValue ',' value=Expression ')'
	//;
	public InsertElements getInsertAccess() {
		return pInsert;
	}
	
	public ParserRule getInsertRule() {
		return getInsertAccess().getRule();
	}
	
	//Print :
	//    'Print('value=Expression')'
	//;
	public PrintElements getPrintAccess() {
		return pPrint;
	}
	
	public ParserRule getPrintRule() {
		return getPrintAccess().getRule();
	}
	
	//ExportCSV :
	//    'Store('path=StringValue')'
	//;
	public ExportCSVElements getExportCSVAccess() {
		return pExportCSV;
	}
	
	public ParserRule getExportCSVRule() {
		return getExportCSVAccess().getRule();
	}
	
	//ExportJSON :
	//    'Export('path=StringValue')'
	//;
	public ExportJSONElements getExportJSONAccess() {
		return pExportJSON;
	}
	
	public ParserRule getExportJSONRule() {
		return getExportJSONAccess().getRule();
	}
	
	//Expression : MathPrimaryExpression | BinaryExpression | NoneValue | StringValue;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//MathExpression :
	//    (MathPrimaryExpression | BinaryExpression)
	//;
	public MathExpressionElements getMathExpressionAccess() {
		return pMathExpression;
	}
	
	public ParserRule getMathExpressionRule() {
		return getMathExpressionAccess().getRule();
	}
	
	//BinaryExpression :
	//    '(' left=MathPrimaryExpression op=Op right=MathExpression ')'
	//;
	public BinaryExpressionElements getBinaryExpressionAccess() {
		return pBinaryExpression;
	}
	
	public ParserRule getBinaryExpressionRule() {
		return getBinaryExpressionAccess().getRule();
	}
	
	//MathPrimaryExpression :
	//    (IntValue | Selectcell | Linesum | Colsum | Lineprod | Colprod)
	//;
	public MathPrimaryExpressionElements getMathPrimaryExpressionAccess() {
		return pMathPrimaryExpression;
	}
	
	public ParserRule getMathPrimaryExpressionRule() {
		return getMathPrimaryExpressionAccess().getRule();
	}
	
	//Selectcell :
	//    'Selectcell('lineIndex=MathExpression','colName=StringValue')'
	//;
	public SelectcellElements getSelectcellAccess() {
		return pSelectcell;
	}
	
	public ParserRule getSelectcellRule() {
		return getSelectcellAccess().getRule();
	}
	
	//Linesum: //somme de toutes les case de la ligne INT
	//    'Linesum('lineIndex=MathExpression')'
	//;
	public LinesumElements getLinesumAccess() {
		return pLinesum;
	}
	
	public ParserRule getLinesumRule() {
		return getLinesumAccess().getRule();
	}
	
	//Colsum : //somme de toutes les case de la col INT
	//    'Colsum('colName=StringValue')'
	//;
	public ColsumElements getColsumAccess() {
		return pColsum;
	}
	
	public ParserRule getColsumRule() {
		return getColsumAccess().getRule();
	}
	
	//Lineprod : //produit de toutes les case de la ligne INT
	//    'Lineprod('lineIndex=MathExpression')'
	//;
	public LineprodElements getLineprodAccess() {
		return pLineprod;
	}
	
	public ParserRule getLineprodRule() {
		return getLineprodAccess().getRule();
	}
	
	//Colprod : //produit de toutes les case de la col INT
	//    'Colprod('colName=StringValue')'
	//;
	public ColprodElements getColprodAccess() {
		return pColprod;
	}
	
	public ParserRule getColprodRule() {
		return getColprodAccess().getRule();
	}
	
	//Op :
	//    '+' | '-' | '*' | '/'
	//;
	public OpElements getOpAccess() {
		return pOp;
	}
	
	public ParserRule getOpRule() {
		return getOpAccess().getRule();
	}
	
	//NoneValue :
	//    value="None"
	//;
	public NoneValueElements getNoneValueAccess() {
		return pNoneValue;
	}
	
	public ParserRule getNoneValueRule() {
		return getNoneValueAccess().getRule();
	}
	
	//IntValue :
	//    value=INT
	//;
	public IntValueElements getIntValueAccess() {
		return pIntValue;
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}
	
	//StringValue :
	//    value=STRING
	//;
	public StringValueElements getStringValueAccess() {
		return pStringValue;
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
