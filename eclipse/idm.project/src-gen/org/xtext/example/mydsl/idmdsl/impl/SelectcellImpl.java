/**
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl.idmdsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.idmdsl.Expression;
import org.xtext.example.mydsl.idmdsl.IdmdslPackage;
import org.xtext.example.mydsl.idmdsl.Selectcell;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Selectcell</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.idmdsl.impl.SelectcellImpl#getCellX <em>Cell X</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.idmdsl.impl.SelectcellImpl#getCellY <em>Cell Y</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SelectcellImpl extends MinimalEObjectImpl.Container implements Selectcell
{
  /**
   * The cached value of the '{@link #getCellX() <em>Cell X</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCellX()
   * @generated
   * @ordered
   */
  protected Expression cellX;

  /**
   * The cached value of the '{@link #getCellY() <em>Cell Y</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCellY()
   * @generated
   * @ordered
   */
  protected Expression cellY;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SelectcellImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return IdmdslPackage.Literals.SELECTCELL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getCellX()
  {
    return cellX;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCellX(Expression newCellX, NotificationChain msgs)
  {
    Expression oldCellX = cellX;
    cellX = newCellX;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, IdmdslPackage.SELECTCELL__CELL_X, oldCellX, newCellX);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCellX(Expression newCellX)
  {
    if (newCellX != cellX)
    {
      NotificationChain msgs = null;
      if (cellX != null)
        msgs = ((InternalEObject)cellX).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - IdmdslPackage.SELECTCELL__CELL_X, null, msgs);
      if (newCellX != null)
        msgs = ((InternalEObject)newCellX).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - IdmdslPackage.SELECTCELL__CELL_X, null, msgs);
      msgs = basicSetCellX(newCellX, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IdmdslPackage.SELECTCELL__CELL_X, newCellX, newCellX));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getCellY()
  {
    return cellY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCellY(Expression newCellY, NotificationChain msgs)
  {
    Expression oldCellY = cellY;
    cellY = newCellY;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, IdmdslPackage.SELECTCELL__CELL_Y, oldCellY, newCellY);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCellY(Expression newCellY)
  {
    if (newCellY != cellY)
    {
      NotificationChain msgs = null;
      if (cellY != null)
        msgs = ((InternalEObject)cellY).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - IdmdslPackage.SELECTCELL__CELL_Y, null, msgs);
      if (newCellY != null)
        msgs = ((InternalEObject)newCellY).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - IdmdslPackage.SELECTCELL__CELL_Y, null, msgs);
      msgs = basicSetCellY(newCellY, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IdmdslPackage.SELECTCELL__CELL_Y, newCellY, newCellY));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case IdmdslPackage.SELECTCELL__CELL_X:
        return basicSetCellX(null, msgs);
      case IdmdslPackage.SELECTCELL__CELL_Y:
        return basicSetCellY(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case IdmdslPackage.SELECTCELL__CELL_X:
        return getCellX();
      case IdmdslPackage.SELECTCELL__CELL_Y:
        return getCellY();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case IdmdslPackage.SELECTCELL__CELL_X:
        setCellX((Expression)newValue);
        return;
      case IdmdslPackage.SELECTCELL__CELL_Y:
        setCellY((Expression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case IdmdslPackage.SELECTCELL__CELL_X:
        setCellX((Expression)null);
        return;
      case IdmdslPackage.SELECTCELL__CELL_Y:
        setCellY((Expression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case IdmdslPackage.SELECTCELL__CELL_X:
        return cellX != null;
      case IdmdslPackage.SELECTCELL__CELL_Y:
        return cellY != null;
    }
    return super.eIsSet(featureID);
  }

} //SelectcellImpl
